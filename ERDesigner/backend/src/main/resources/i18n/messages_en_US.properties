# Common messages
common.success=Operation successful
common.error=Operation failed
common.file.processing.failed=File processing failed
common.generation.failed=Generation failed
common.save.failed=Save failed
common.query.failed=Query failed
common.delete.failed=Delete failed
common.get.failed=Get failed

# File related
file.please.select.xml=Please select XML file
file.please.upload.xml=Please upload XML format file
file.save.temp.file=Save temporary file
file.validate.xml.format=Validate XML file format
file.cleanup.temp.file=Cleanup temporary file

# Database related
database.create.sql=Generate create database SQL statement
database.create.table.sql=Generate create table SQL statement
database.create.index.sql=Generate create index SQL statement
database.generate.table.failed=Failed to generate database table
database.sql.generation.success=SQL generation successful
database.sql.generation.failed=SQL generation failed
database.save.sql.file=Save SQL to file
database.create.sqls.directory=Create sqls directory
database.sql.saved.to.file=SQL saved to file
database.save.sql.file.failed=Failed to save SQL file
database.h2.auto.create=H2 database will be created automatically
database.h2.delete.file=H2 database deletion requires file deletion
database.oracle.instance=Oracle database instance
database.oracle.instance.need.dba=Requires DBA manual creation
database.oracle.delete.need.dba=Oracle database deletion requires DBA operation

# Metadata related
metadata.save.success=Metadata saved successfully
metadata.save.failed=Failed to save metadata
metadata.query.failed=Failed to query metadata
metadata.delete.success=Metadata deleted successfully
metadata.delete.failed=Failed to delete metadata
metadata.start.save.schema=Start saving schema definition
metadata.save.complete=Schema definition saved successfully, {0} metadata records saved
metadata.query.schema=Query schema definition
metadata.schema.not.found=Schema definition not found
metadata.storage.table=XML metadata storage table
metadata.generate.and.save=Generate and save metadata
metadata.save.complete.simple=Metadata save completed
metadata.generate.from.db=Generate SQL from metadata

# XML parsing related
xml.parse.start=Start parsing XML from input stream
xml.parse.complete=XML parsing completed, {0} table definitions parsed

# Table generation related
table.generator.controller=Table Generator Controller
table.generator.service=Table Generator Service
table.generator.api.description=XML table definition parsing and database table generation API
table.generator.name=Table Generator
table.core.service.description=Core service class, integrating XML parsing, SQL generation and database execution functions

# Service related
service.sql.generator=SQL Generation Service
service.xml.parser=XML Parser Service
service.xml.parser.description=Responsible for parsing XML files and converting to data models
service.metadata=Metadata Service Class
service.table.generator=Table Generator Service

# Field related
field.primary.key.id=Primary Key ID
field.name=Name
field.description=Description
field.content=Content
field.schema.name=Schema Name
field.table.name=Table Name
field.field.name=Field Name
field.field.type=Field Type
field.field.length=Field Length
field.field.scale=Field Scale
field.is.nullable=Is Nullable
field.is.primary.key=Is Primary Key
field.is.auto.increment=Is Auto Increment
field.default.value=Default Value
field.comment=Comment
field.index.name=Index Name
field.index.type=Index Type

# Table related
table.users=Users Table
table.user.profiles=User Profiles Table
table.posts=Posts Table
table.inherit.table=Table inheriting database configuration
table.custom.table=Table with custom configuration
table.partial.table=Table with partial custom configuration

# Status related
status.normal.disabled=Status: 1-Normal, 0-Disabled
status.publish.draft=Status: 1-Published, 0-Draft
gender.male.female.unknown=Gender: 1-Male, 2-Female, 0-Unknown

# Time related
time.create.time=Create Time
time.update.time=Update Time
time.birthday=Birthday

# Other fields
other.username=Username
other.email=Email Address
other.password=Password
other.nickname=Nickname
other.avatar=Avatar URL
other.phone=Phone Number
other.address=Address
other.user.id=User ID
other.author.id=Author ID
other.title=Title
other.content=Content
other.view.count=View Count
other.like.count=Like Count

# Database dialect related
dialect.database.factory=Database Dialect Factory Class
dialect.get.dialect.by.type=Get corresponding dialect implementation by database type
dialect.mysql.implementation=MySQL Database Dialect Implementation
dialect.h2.implementation=H2 Database Dialect Implementation
dialect.oracle.implementation=Oracle Database Dialect Implementation
dialect.postgresql.implementation=PostgreSQL Database Dialect Implementation
dialect.sqlserver.implementation=SQL Server Database Dialect Implementation

# Model related
model.database.schema=Database Schema Definition Model
model.database.schema.description=Corresponds to XML root element, contains multiple table definitions
model.table.definition=Table Definition Model
model.table.definition.description=Corresponds to table element in XML
model.field.definition=Field Definition Model
model.field.definition.description=Corresponds to field element in XML
model.index.definition=Index Definition Model
model.index.definition.description=Corresponds to index element in XML
model.relation.definition=Relation Definition Model
model.relation.definition.description=Corresponds to relation element in XML
model.index.column.definition=Index Column Definition Model
model.index.column.definition.description=Corresponds to column element in XML
model.metadata.entity=Metadata entity class for saving XML metadata to database
model.api.response=Unified API Response Model
model.api.response.description=API unified response format

# Configuration related
config.swagger=Swagger Configuration Class
config.fastlcdp.api.doc=FastLCDP API Documentation
config.api.description=Low-code development platform API for quickly generating database tables based on XML definitions
config.dev.environment=Development Environment
config.prod.environment=Production Environment

# Application related
app.fastlcdp.startup=FastLCDP Application Startup Class
app.description=Spring Boot framework for generating database tables based on XML parsing

# Test related
test.inheritance.database=Database for testing inheritance functionality
test.inherit.default.config=No engine and charset defined, should inherit database defaults
test.custom.config=Defined own engine and charset, should use table-level configuration
test.partial.config=Only engine defined, charset should inherit database defaults

# Database properties related
db.name=Database Name
db.version=Database Version
db.charset=Database Charset
db.collation=Database Collation
db.engine=Database Default Storage Engine (MySQL specific)
db.comment=Database Comment
db.table.list=Table Definition List

# Table properties related
table.name=Table Name
table.comment=Table Comment
table.inherit.parent=Inherited Parent Table Name
table.engine=Table Engine Type (MySQL specific)
table.engine.inherit=If not set, will inherit database-level default engine
table.charset=Charset
table.charset.inherit=If not set, will inherit database-level default charset
table.field.list=Field List
table.index.list=Index List
table.relation.list=Foreign Key Relation List

# Field properties related
field.name=Field Name
field.type=Field Type
field.length=Field Length
field.precision=Precision (total digits for decimal type)
field.scale=Scale (decimal places for decimal type)
field.nullable=Is Nullable
field.primary.key=Is Primary Key
field.auto.increment=Is Auto Increment
field.default.value=Default Value
field.comment=Field Comment
field.unique=Is Unique
field.charset=Charset (for string types)
field.collation=Collation (for string types)

# Index properties related
index.name=Index Name
index.type=Index Type: NORMAL, UNIQUE, FULLTEXT, SPATIAL
index.method=Index Method: BTREE, HASH
index.comment=Comment
index.field.list=Index Field List
index.column.list=Index Field List (nested format)
index.column.name=Column Name
index.column.length=Index Length (for prefix index)
index.column.sort=Sort Order: ASC, DESC
index.column.comment=Column Comment

# Relation properties related
relation.foreign.key.name=Foreign Key Name
relation.local.field=Local Field Name
relation.reference.table=Referenced Table Name
relation.reference.field=Referenced Field Name
relation.on.delete=On Delete Action: CASCADE, SET_NULL, RESTRICT, NO_ACTION
relation.on.update=On Update Action: CASCADE, SET_NULL, RESTRICT, NO_ACTION
relation.type=Relation Type: ONE_TO_ONE, ONE_TO_MANY, MANY_TO_ONE, MANY_TO_MANY
relation.comment=Relation Comment

# API response related
api.response.success=Operation Success
api.response.message=Response Message
api.response.data=Response Data
api.response.timestamp=Timestamp

# Database interface related
interface.database.dialect=Database Dialect Interface
interface.dialect.description=Define SQL generation rules for different databases
interface.identifier.quote=Get identifier quote character
interface.support.if.not.exists=Support IF NOT EXISTS syntax
interface.auto.increment.keyword=Get auto increment keyword
interface.current.timestamp=Get current timestamp function
interface.create.database.sql=Generate create database SQL statement
interface.drop.database.sql=Generate drop database SQL statement
interface.field.type.definition=Generate field type definition
interface.field.definition.sql=Generate field definition SQL
interface.primary.key.sql=Generate primary key definition SQL
interface.index.sql=Generate index creation SQL
interface.foreign.key.sql=Generate foreign key constraint SQL
interface.create.table.sql=Generate create table SQL statement
interface.drop.table.sql=Generate drop table SQL statement
interface.table.exists.sql=Generate check table exists SQL statement
interface.table.structure.sql=Generate get table structure SQL statement
interface.escape.identifier=Escape identifier (table name, field name, etc.)
interface.escape.string=Escape string value
interface.pagination.sql=Get pagination query SQL
interface.database.type.name=Get database type name