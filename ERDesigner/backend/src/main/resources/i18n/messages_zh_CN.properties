# 通用消息
common.success=操作成功
common.error=操作失败
common.file.processing.failed=文件处理失败
common.generation.failed=生成失败
common.save.failed=保存失败
common.query.failed=查询失败
common.delete.failed=删除失败
common.get.failed=获取失败

# 文件相关
file.please.select.xml=请选择XML文件
file.please.upload.xml=请上传XML格式的文件
file.save.temp.file=保存临时文件
file.validate.xml.format=验证XML文件格式
file.cleanup.temp.file=清理临时文件

# 数据库相关
database.create.sql=生成创建数据库的SQL语句
database.create.table.sql=生成创建表的SQL语句
database.create.index.sql=生成创建索引的SQL语句
database.generate.table.failed=生成数据库表失败
database.sql.generation.success=SQL生成成功
database.sql.generation.failed=SQL生成失败
database.save.sql.file=保存SQL到文件
database.create.sqls.directory=创建sqls目录
database.sql.saved.to.file=SQL已保存到文件
database.save.sql.file.failed=保存SQL文件失败
database.h2.auto.create=H2数据库会自动创建
database.h2.delete.file=H2数据库删除需要删除文件
database.oracle.instance=Oracle数据库实例
database.oracle.instance.need.dba=需要DBA手动创建
database.oracle.delete.need.dba=Oracle数据库删除需要DBA操作

# 元数据相关
metadata.save.success=元数据保存成功
metadata.save.failed=保存元数据失败
metadata.query.failed=查询元数据失败
metadata.delete.success=元数据删除成功
metadata.delete.failed=删除元数据失败
metadata.start.save.schema=开始保存模式定义
metadata.save.complete=模式定义保存完成，共保存 {0} 条元数据记录
metadata.query.schema=查询模式定义
metadata.schema.not.found=未找到模式定义
metadata.storage.table=XML元数据存储表
metadata.generate.and.save=生成并保存元数据
metadata.save.complete.simple=元数据保存完成
metadata.generate.from.db=从元数据生成SQL

# XML解析相关
xml.parse.start=开始从输入流解析XML
xml.parse.complete=XML解析完成，共解析到 {0} 个表定义

# 表生成相关
table.generator.controller=表生成器控制器
table.generator.service=表生成器服务
table.generator.api.description=XML表定义解析与数据库表生成API
table.generator.name=表生成器
table.core.service.description=核心服务类，整合XML解析、SQL生成和数据库执行功能

# 服务相关
service.sql.generator=SQL生成服务
service.xml.parser=XML解析服务
service.xml.parser.description=负责解析XML文件并转换为数据模型
service.metadata=元数据服务类
service.table.generator=表生成器服务

# 字段相关
field.primary.key.id=主键ID
field.description=描述
field.content=内容
field.schema.name=模式名称
field.table.name=表名称
field.field.name=字段名称
field.field.type=字段类型
field.field.length=字段长度
field.field.scale=字段精度
field.is.nullable=是否可空
field.is.primary.key=是否主键
field.is.auto.increment=是否自增
field.index.name=索引名称
field.index.type=索引类型

# 表相关
table.users=用户表
table.user.profiles=用户资料表
table.posts=文章表
table.inherit.table=继承数据库配置的表
table.custom.table=自定义配置的表
table.partial.table=部分自定义配置的表

# 状态相关
status.normal.disabled=状态：1-正常，0-禁用
status.publish.draft=状态：1-发布，0-草稿
gender.male.female.unknown=性别：1-男，2-女，0-未知

# 时间相关
time.create.time=创建时间
time.update.time=更新时间
time.birthday=生日

# 其他字段
other.username=用户名
other.email=邮箱地址
other.password=密码
other.nickname=昵称
other.avatar=头像URL
other.phone=手机号
other.address=地址
other.user.id=用户ID
other.author.id=作者ID
other.title=标题
other.content=内容
other.view.count=浏览次数
other.like.count=点赞次数

# 数据库方言相关
dialect.database.factory=数据库方言工厂类
dialect.get.dialect.by.type=根据数据库类型获取对应的方言实现
dialect.mysql.implementation=MySQL数据库方言实现
dialect.h2.implementation=H2数据库方言实现
dialect.oracle.implementation=Oracle数据库方言实现
dialect.postgresql.implementation=PostgreSQL数据库方言实现
dialect.sqlserver.implementation=SQL Server数据库方言实现

# 模型相关
model.database.schema=数据库模式定义模型
model.database.schema.description=对应XML根元素，包含多个表定义
model.table.definition=表定义模型
model.table.definition.description=对应XML中的table元素
model.field.definition=字段定义模型
model.field.definition.description=对应XML中的field元素
model.index.definition=索引定义模型
model.index.definition.description=对应XML中的index元素
model.relation.definition=关联关系定义模型
model.relation.definition.description=对应XML中的relation元素
model.index.column.definition=索引列定义模型
model.index.column.definition.description=对应XML中的column元素
model.metadata.entity=元数据实体类，用于保存XML中的元数据到数据库
model.api.response=统一API响应模型
model.api.response.description=API统一响应格式

# 配置相关
config.swagger=Swagger配置类
config.fastlcdp.api.doc=FastLCDP API文档
config.api.description=基于XML定义快速生成数据库表的低代码开发平台API
config.dev.environment=开发环境
config.prod.environment=生产环境
config.api.version=1.0.0
config.api.contact.name=FastLCDP 开发团队
config.api.contact.email=shijiachen@traninfo.com.cn
config.api.contact.url=https://github.com/james-shijiachen/FastLCDP
config.api.license.name=Apache 2.0
config.api.license.url=https://www.apache.org/licenses/LICENSE-2.0
config.loading.url.title=API 文档地址:
config.loading.swagger.title=Swagger UI 地址:

# 应用相关
app.fastlcdp.startup=FastLCDP应用程序启动类
app.description=基于XML解析生成数据表的Spring Boot框架

# 测试相关
test.inheritance.database=测试继承功能的数据库
test.inherit.default.config=没有定义engine和charset，应该继承数据库的默认值
test.custom.config=定义了自己的engine和charset，应该使用表级别的配置
test.partial.config=只定义了engine，charset应该继承数据库的默认值

# 数据库属性相关
db.name=数据库名称
db.version=数据库版本
db.charset=数据库字符集
db.collation=数据库排序规则
db.engine=数据库默认存储引擎（MySQL专用）
db.comment=数据库注释
db.table.list=表定义列表

# 表属性相关
table.name=表名
table.comment=表注释
table.inherit.parent=继承的父表名
table.engine=表引擎类型（MySQL专用）
table.engine.inherit=如果未设置，将继承数据库级别的默认engine
table.charset=字符集
table.charset.inherit=如果未设置，将继承数据库级别的默认charset
table.field.list=字段列表
table.index.list=索引列表
table.relation.list=外键关联列表

# 字段属性相关
field.name=字段名
field.type=字段类型
field.length=字段长度
field.precision=精度（用于decimal类型的总位数）
field.scale=小数位数（用于decimal类型）
field.nullable=是否允许为空
field.primary.key=是否为主键
field.auto.increment=是否自增
field.default.value=默认值
field.comment=字段注释
field.unique=是否唯一
field.charset=字符集（用于字符串类型）
field.collation=排序规则（用于字符串类型）

# 索引属性相关
index.name=索引名称
index.type=索引类型：NORMAL, UNIQUE, FULLTEXT, SPATIAL
index.method=索引方法：BTREE, HASH
index.comment=注释
index.field.list=索引字段列表
index.column.list=索引字段列表（嵌套格式）
index.column.name=列名
index.column.length=索引长度（用于前缀索引）
index.column.sort=排序方式：ASC, DESC
index.column.comment=列注释

# 关联属性相关
relation.foreign.key.name=外键名称
relation.local.field=本表字段名
relation.reference.table=引用的表名
relation.reference.field=引用的字段名
relation.on.delete=删除时的动作：CASCADE, SET_NULL, RESTRICT, NO_ACTION
relation.on.update=更新时的动作：CASCADE, SET_NULL, RESTRICT, NO_ACTION
relation.type=关联类型：ONE_TO_ONE, ONE_TO_MANY, MANY_TO_ONE, MANY_TO_MANY
relation.comment=关联注释

# API响应相关
api.response.success=操作是否成功
api.response.message=响应消息
api.response.data=响应数据
api.response.timestamp=时间戳

# 数据库接口相关
interface.database.dialect=数据库方言接口
interface.dialect.description=定义不同数据库的SQL生成规则
interface.identifier.quote=获取标识符引用字符
interface.support.if.not.exists=是否支持 IF NOT EXISTS 语法
interface.auto.increment.keyword=获取自增关键字
interface.current.timestamp=获取当前时间戳函数
interface.create.database.sql=生成创建数据库的SQL语句
interface.drop.database.sql=生成删除数据库的SQL语句
interface.field.type.definition=生成字段类型定义
interface.field.definition.sql=生成字段定义SQL
interface.primary.key.sql=生成主键定义SQL
interface.index.sql=生成索引创建SQL
interface.foreign.key.sql=生成外键约束SQL
interface.create.table.sql=生成创建表的SQL语句
interface.drop.table.sql=生成删除表的SQL语句
interface.table.exists.sql=生成检查表是否存在的SQL语句
interface.table.structure.sql=生成获取表结构的SQL语句
interface.escape.identifier=转义标识符（表名、字段名等）
interface.escape.string=转义字符串值
interface.pagination.sql=获取分页查询SQL
interface.database.type.name=获取数据库类型名称

# ===== DatabaseManagementController Swagger i18n =====
api.database.management.tag.description=数据库管理相关接口
api.table.create.summary=创建表
api.table.create.desc=创建表的同时可批量创建字段、索引、关联等
api.table.create.param.tableDefinition=表定义（包含字段、索引、关联等）

api.field.create.summary=创建字段
api.field.create.desc=为指定表单独新增字段
api.field.create.param.fieldDefinition=字段定义

api.field.update.summary=修改字段
api.field.update.desc=修改指定表的字段属性
api.field.update.param.fieldUpdate=字段更新内容

api.table.update.summary=修改表
api.table.update.desc=修改表结构及属性
api.table.update.param.tableUpdate=表更新内容

api.database.create.summary=创建数据库
api.database.create.desc=新建数据库实例
api.database.create.param.dbDefinition=数据库定义

api.relation.create.summary=创建关联
api.relation.create.desc=为表之间建立外键或逻辑关联
api.relation.create.param.relationDefinition=关联定义

api.index.create.summary=创建索引
api.index.create.desc=为表创建索引
api.index.create.param.indexDefinition=索引定义

api.import.summary=导入数据库结构
api.import.desc=通过文件导入数据库结构（如XML/SQL）
api.import.param.file=导入文件（XML/SQL）

api.export.summary=导出数据库结构
api.export.desc=导出指定数据库结构为文件
api.export.param.dbName=数据库名称

api.table.list.summary=查表
api.table.list.desc=查询数据库下所有表信息
api.table.list.param.dbName=数据库名称（可选）

api.tree.summary=数据库表树结构
api.tree.desc=返回数据库-表-字段的树形结构（JSON）

api.database.management.tag.name=数据库管理